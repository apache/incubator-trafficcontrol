#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

- name: Create Federation
  vars:
    cdn_name_query: 'response[?xmlId == `{{ federation.deliveryService | to_json }}`].cdnName | [0]'
    cdn_name: '{{ get_all_ds.json | json_query(cdn_name_query) }}'
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/cdns/{{ cdn_name }}/federations"
    method: POST
    body: '{"cname":{{ federation.mappings.cname | to_json }},"ttl":{{ federation.mappings.ttl }}}'
  register: create_federation_out

- name: Get Federation ID
  vars:
    federation_id_query: response.id
  set_fact:
    federation_id: "{{ create_federation_out.json | json_query(federation_id_query) }}"

- name: Assign User to Federation
  vars:
    federation_user_query: "response[?username == `{{ federation_user }}`].id | [0]"
    federation_user_id: "{{ get_all_users.json | json_query(federation_user_query) }}"
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federations/{{ federation_id }}/users"
    method: POST
    body: '{"userIds":[{{ federation_user_id }}],"replace":false}'

- name: Assign Delivery Service to Federation
  vars:
    federation_ds_id_query: 'response[?xmlId == `{{ federation.deliveryService | to_json }}`].id | [0]'
    federation_ds_id: "{{ get_all_ds.json | json_query(federation_ds_id_query) }}"
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federations/{{ federation_id }}/deliveryservices"
    method: POST
    body: '{"dsIds":[{{ federation_ds_id }}],"replace":false}'

- name: Create IPv4 Federation Resolvers
  with_items: "{{ federation.mappings.resolve4 }}"
  vars:
    type_name: RESOLVE4
    type_query: "[?name == `{{ type_name }}`].id | [0]"
    resolve4_type_id: "{{ get_all_types.json.response | json_query(type_query) }}"
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federation_resolvers"
    method: POST
    body: '{"ipAddress":{{ item | to_json }},"typeId":{{ resolve4_type_id }}}'
  register: ipv4_federation_resolver_out

- name: Create IPv6 Federation Resolvers
  with_items: "{{ federation.mappings.resolve6 }}"
  vars:
    type_name: RESOLVE6
    type_query: "[?name == `{{ type_name }}`].id | [0]"
    resolve6_type_id: "{{ get_all_types.json.response | json_query(type_query) }}"
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federation_resolvers"
    method: POST
    body: '{"ipAddress":{{ item | to_json }},"typeId":{{ resolve6_type_id }}}'
  register: ipv6_federation_resolver_out

- name: Get Federation Resolver IDs
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federation_resolvers"
    method: GET
  register: federation_resolver_ids_out

- name: Assign Federation Resolvers to Federation
  vars:
    federation_resolver_ids_query: 'response[].id'
  uri:
    url: "{{ dl_to_url }}/api/{{ dl_to_api_version }}/federations/{{ federation_id }}/federation_resolvers"
    method: POST
    body: '{"fedResolverIds":{{ federation_resolver_ids_out.json | json_query(federation_resolver_ids_query) }},"replace":true}'
